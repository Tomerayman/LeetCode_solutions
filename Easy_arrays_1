class Solution {
public:

    // ex. 1
    int removeDuplicates(vector<int>& nums) 
    {
        if (nums.size() == 0)
        {
            return 0;
        }
        int n = nums.size();
        int k = 1;
        for (int i = 1; i < n; i++)
        {
            if (nums[i] != nums[i - 1])
            {
                nums[k] = nums[i];
                k++;
            }                                  
        }
        return k; 
    }

    // ex. 2
        int maxProfit(vector<int>& prices) 
    {
        if (prices.size() == 0)
        {
            return 0;
        }
        bool holding = false;
        int profit = 0;
        int profitBeforeLastSell = 0;
        int n = prices.size();
        for (int i = 0; i < n; i++)
        {
            if (isLocalMin(prices, i) && !holding)
            {
                holding = true;
                profit -= prices[i];
            }
            else if (isLocalMax(prices, i) && holding)
            {
                profit += prices[i];
                profitBeforeLastSell = profit;
                holding = false;
            }
        }
        return (profit > profitBeforeLastSell) ? profit : profitBeforeLastSell;
    }

    /**
     * helper for ex2, answers element i is local max in array.
     **/    
    bool isLocalMax(vector<int>& arr, int i)
    {
        if(arr.size() == 1 && i == 0)
        {
            return true;
        }
        
        if (i == 0)
        {
            return (arr[i] >= arr[i + 1]);
        }
        else if(i == arr.size() - 1)
        {
            return (arr[i] >= arr[i - 1]);
        }
        return (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1]);
    }
    
    
    /**
     * helper for ex2, answers element i is local min in array.
     **/

    bool isLocalMin(vector<int>& arr, int i)
    {
        if(arr.size() == 1 && i == 0)
        {
            return true;
        }
        
        if (i == 0)
        {
            return (arr[i] <= arr[i + 1]);
        }
        else if(i == arr.size() - 1)
        {
            return (arr[i] <= arr[i - 1]);
        }
        return (arr[i] <= arr[i - 1] && arr[i] <= arr[i + 1]);
    }

};